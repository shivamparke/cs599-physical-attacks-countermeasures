import math
from collections import Counter

N_BELLCORE = 0x9B1F16A7696AC90FA7AE615A1F71BD1AC0C31B37A9F14376BEC7FB701412F0E3B79CAB88F906B350B521578766C78CACD2E80632D0935F50CDDC415DC1B046EB3B3556624EB412D056F873E5A056C2B85B364D032BBAA9276757B058879B02CB2098D63C61551D4753B1AE1890D8FF79BA10F82307492A775A5715AD605B5601
S_BELLCORE = 0x1448FA660D3DEE693A9AE10E3DBE176DD0AE9637F2896003367FAB3F71C1BE2C8A143DD9E4167C9A07801E666AC268F376EE6B9A27752322E1BBD16F8DDA2B90058A07B1AB564537C800953BD23771D8CFD08B96D34BA6013B10383B19D0F263E0EEBC7D09FDFEA003D73DDA885D25A3C2870CF8E5FFE7201AE75874F383097B
SDASH_BELLCORE = 0x9ABD38BDD461B4F8F6A1824B1B43D41C18319071CA6028865576C32A258532BB08A449F29372F4BDB016B5A1F57AAA96BE66B17ECF0CD2BF89C7CAC77E5B1A43460688C3EDBF6DA6EBCEEA9B5797A4FC28EC93EF18DA6EE54A523861ABEDC82C4A148EC5C88DE1C51B6C813C8C13173E8526D0035E2A375CF7222A18C2860B1A
# print(N_BELLCORE.bit_length(), S_BELLCORE.bit_length(), SDASH_BELLCORE.bit_length())

N_LENSTRA = 0xC2D2BE8E722AE5BBD23DFAD362A08B4D32A45115542E23E49B3546583338CD8B8BA42EF289B2E447E9BF6EAF7F24D02565D224ABDDD6D2F44A6F2816A4323196942DF20DED8F10024524E1B2F02F4AD0C1CBF7C778270BCD708EBFA049384EDEEF24C084DA3CA2EE146CA579CC42AEE7F6D4B0F59E5843A519329BEB5F976607
E_LENSTRA = 0x010001
M_LENSTRA = 0x1E8ADB08E98A58012C55A8C419747BD8D8DB40FAC240DA92BF4874F79E9AD73B20A934070CAA60C767254168ABEB37955618458F6BF94B2D7BA8921DE7E84FA67AF7E0D6FE9EDD554ABF4418F7AEE8D829E6EC1245CFCBAF589667963B531B89AF63879C9A653176A03BA689BC5DD45DA663910A19FA496A6AEFB3F9ADFFF696
SDASH_LENSTRA = 0x2572EE15579D2E18724E98A137BC82CC46654E04E0AF227C36D7B0C29EF49D1B7757A367712EBC6C8DAD7E526678860CCD44AFFBE0C3791F4E0BA3E1863303E807CC4BD8A89542B22158D67D99DC93050ACA584D2D06950B6DC6157E47CFED4DC6D877E47A0C7F1A09FEA4115EBF67EFDAF4A8409689054366E58786E74D2ABD


'''
Factorizing 1024-bit number LOL !!!
'''
# def factorize(N):
#     if 0 <= N <= 3:
#         return []
#     result = []
#     is_N_prime = True
#     for i in range(2, (N // 2) + 1):
#         while N % i == 0:
#             is_N_prime = False
#             result.append(i)
#             N = N // i
#             if N == 1:
#                 return result
#         if i > math.floor(math.sqrt(N)):
#             if is_N_prime:
#                 return result
#             result.append(N)
#             return result
#
#
# def calc_gcd(factors1, factors2):
#     counter1 = Counter(factors1)
#     counter2 = Counter(factors2)
#     intersection = counter1 & counter2
#     gcd = 1
#     for element in intersection.elements():
#         gcd *= element
#     return gcd


def attack_bellcore():
    x = math.gcd(SDASH_BELLCORE - S_BELLCORE, N_BELLCORE)
    p = 0
    if x > 1:
        p = x
    # print(N_BELLCORE % p)
    q = N_BELLCORE // p
    return p, q


def attack_lenstra():
    x = math.gcd(N_LENSTRA, (pow(SDASH_LENSTRA, E_LENSTRA, N_LENSTRA)) - M_LENSTRA)
    p = 0
    if x > 1:
        p = x
    # print(N_LENSTRA % p)
    q = N_LENSTRA // p
    return p, q


print(attack_bellcore())
print(attack_lenstra())

